import asyncio
import logging
import os
import sys
from datetime import datetime, time, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand

# Add the parent directory to path so we can import Flask models
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import config
from utils import get_latest_news, format_news_message

# Initialize Flask app context to access models
try:
    from main import app, db, Subscriber, FeedSource, BotSettings, NewsItem, SendTime
    use_db = True
    
    # Function to get bot settings
    def get_bot_settings():
        """Get bot settings from database"""
        with app.app_context():
            settings = BotSettings.query.first()
            if not settings:
                settings = BotSettings()
                db.session.add(settings)
                db.session.commit()
            return settings
    
    # Function to check if bot is active
    def is_bot_active():
        """Check if bot is active based on settings"""
        with app.app_context():
            settings = BotSettings.query.first()
            if not settings:
                return True  # Default to active if no settings
            return settings.is_active
    
    # Function to get Telegram token
    def get_telegram_token():
        """Get Telegram token from database settings"""
        with app.app_context():
            settings = BotSettings.query.first()
            if settings and settings.telegram_token:
                return settings.telegram_token
            return config.API_TOKEN
    
    # Function to get news per source
    def get_news_per_source():
        """Get news per source setting"""
        with app.app_context():
            settings = BotSettings.query.first()
            if settings:
                return settings.news_per_source
            return config.NEWS_PER_FEED
    
    # Function to get daily send time
    def get_daily_send_time():
        """Get daily send time setting (Moscow time)"""
        with app.app_context():
            settings = BotSettings.query.first()
            if settings and settings.daily_send_time:
                return settings.daily_send_time
            return time(8, 0)  # Default to 8:00 AM Moscow time
            
    # Function to get all active send times
    def get_all_send_times():
        """Get all active send times from the database (all times in Moscow timezone)"""
        with app.app_context():
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8:00, 12:00, 18:00
            hardcoded_times = [time(8, 0), time(12, 0), time(18, 0)]
            
            try:
                # Get main send time from settings
                settings = BotSettings.query.first()
                main_time = time(8, 0)  # Default - 8:00 AM Moscow time
                if settings and settings.daily_send_time:
                    main_time = settings.daily_send_time
                    
                # Get additional send times
                additional_times = [st.send_time for st in SendTime.query.filter_by(is_active=True).all()]
                
                # Combine all times
                all_times = [main_time] + additional_times
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤—Ä–µ–º—è
                if not all_times:
                    logger.warning("No send times found in database, using hardcoded times")
                    all_times = hardcoded_times
            except Exception as e:
                logger.error(f"Error getting send times from database: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
                all_times = hardcoded_times
            
            # Log all times for debugging
            time_strings = [t.strftime('%H:%M') for t in all_times]
            logger.info(f"Scheduled send times (Moscow): {', '.join(time_strings)}")
            
            # Hard debug check: –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–æ
            for idx, t in enumerate(all_times):
                logger.info(f"Send time {idx+1}: {t.strftime('%H:%M')} - hour={t.hour}, minute={t.minute}")
                
            return all_times
    
    # Function to add subscriber using Flask models
    def add_subscriber(user_id, username=None, first_name=None, last_name=None):
        """Add a new subscriber using Flask SQLAlchemy model"""
        with app.app_context():
            # Check if subscriber exists
            existing = Subscriber.query.filter_by(user_id=user_id).first()
            if existing:
                if not existing.is_active:
                    existing.is_active = True
                    existing.username = username if username else existing.username
                    existing.first_name = first_name if first_name else existing.first_name
                    existing.last_name = last_name if last_name else existing.last_name
                    db.session.commit()
                    return True
                return False
            
            # Create new subscriber
            new_subscriber = Subscriber(
                user_id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                is_active=True
            )
            db.session.add(new_subscriber)
            db.session.commit()
            return True
    
    # Function to remove subscriber
    def remove_subscriber(user_id):
        """Remove a subscriber using Flask SQLAlchemy model"""
        with app.app_context():
            subscriber = Subscriber.query.filter_by(user_id=user_id).first()
            if not subscriber:
                return False
            
            # Instead of deleting, mark as inactive
            subscriber.is_active = False
            db.session.commit()
            return True
    
    # Function to get all subscribers
    def get_all_subscribers():
        """Get all active subscribers using Flask SQLAlchemy model"""
        with app.app_context():
            subscribers = Subscriber.query.filter_by(is_active=True).all()
            return [s.user_id for s in subscribers]
    
    # Function to save news items to database
    def save_news_items(news_items):
        """Save news items to database"""
        with app.app_context():
            # Clear existing news
            NewsItem.query.delete()
            
            # Save new items
            for item in news_items:
                # Find the feed source
                feed_source = FeedSource.query.filter_by(name=item.get('source', '')).first()
                feed_id = feed_source.id if feed_source else None
                
                news_item = NewsItem(
                    title=item['title'],
                    link=item['link'],
                    source=item.get('source', ''),
                    summary=item.get('summary', ''),
                    pub_date=item.get('pub_date', ''),
                    feed_id=feed_id
                )
                db.session.add(news_item)
            
            db.session.commit()

except ImportError:
    # If Flask app is not available, use the simple JSON db
    use_db = False
    from db import add_subscriber, remove_subscriber, get_all_subscribers
    
    def get_bot_settings():
        return None
    
    def is_bot_active():
        return True
    
    def get_telegram_token():
        return config.API_TOKEN
    
    def get_news_per_source():
        return config.NEWS_PER_FEED
        
    def get_daily_send_time():
        return time(8, 0)  # Default to 8:00 AM by Moscow time
        
    def get_all_send_times():
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –±–µ–∑ –ë–î
        return [time(8, 0), time(12, 0), time(18, 0)]  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞: 8:00, 12:00, 18:00
    
    def save_news_items(news_items):
        pass  # No database to save to
    
    logging.warning("Could not import Flask models, using JSON database instead")

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    admin_ids = [502783765, 957555131, 1148332858]
    
    # –ï—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Å–ø–∏—Å–æ–∫
    if not use_db:
        return user_id in admin_ids
    
    try:
        with app.app_context():
            subscriber = Subscriber.query.filter_by(user_id=user_id, is_admin=True).first()
            return subscriber is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Å–ø–∏—Å–æ–∫
        return user_id in admin_ids

# Create keyboards for bot
def get_main_keyboard():
    """Create main keyboard with commands"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")],
            [KeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def get_admin_keyboard():
    """Create keyboard with admin commands"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")],
            [KeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
            [KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

# Initialize bot and dispatcher with token from settings
token = get_telegram_token()
bot = Bot(token=token)
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_bot_commands():
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await bot.set_my_commands([
        BotCommand(command="start", description="–°—Ç–∞—Ä—Ç - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="news", description="–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
        BotCommand(command="subscribe", description="–ù–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏ - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"),
        BotCommand(command="unsubscribe", description="–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - —Å–≤–µ–¥–µ–Ω–∏—è –æ –±–æ—Ç–µ"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
    ])

# Command handlers
@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    """Handle /start command"""
    if not is_bot_active():
        await message.reply(
            "‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        return
    
    keyboard = get_main_keyboard()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_user_admin = await is_admin(message.from_user.id)
    keyboard = get_admin_keyboard() if is_user_admin else get_main_keyboard()
    
    commands_list = (
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/–Ω–æ–≤–æ—Å—Ç–∏ - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "/–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/–ø–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    )
    
    if is_user_admin:
        admin_commands = (
            "\n<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            "/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞\n"
            "/–æ–±–Ω–æ–≤–∏—Ç—å - –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é\n"
        )
        commands_list += admin_commands
    
    await message.reply(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç ¬´–ù–æ–≤–æ—Å—Ç–∏ –ê–Ω–∞–ø–∞ Pro¬ª!\n\n"
        f"–Ø –±—É–¥—É –¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ê–Ω–∞–ø—ã –∏ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è.\n\n"
        f"{commands_list}\n"
        f"–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@dp.message(Command('–Ω–æ–≤–æ—Å—Ç–∏', 'news'))
@dp.message(F.text == "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
async def cmd_news(message: types.Message):
    """Handle /–Ω–æ–≤–æ—Å—Ç–∏ command"""
    if not is_bot_active():
        await message.reply(
            "‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        return
    
    await message.reply("üîç <i>–ò—â—É —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...</i>", parse_mode="HTML")
    
    # Get news per source setting
    news_per_source = get_news_per_source()
    
    news_items, has_errors = get_latest_news(news_per_source)
    formatted_news = format_news_message(news_items)
    
    # Save news items to database if using DB
    if use_db:
        save_news_items(news_items)
    
    # Add status information if there were any errors
    if has_errors:
        formatted_news += "\n\n‚ö†Ô∏è <i>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</i>"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_user_admin = await is_admin(message.from_user.id)
    keyboard = get_admin_keyboard() if is_user_admin else get_main_keyboard()
    
    await message.reply(
        formatted_news, 
        parse_mode="HTML", 
        disable_web_page_preview=True,
        reply_markup=keyboard
    )

@dp.message(Command('–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', 'subscribe'))
@dp.message(F.text == "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
async def cmd_subscribe(message: types.Message):
    """Handle /–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è command"""
    if not is_bot_active():
        await message.reply(
            "‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        return
    
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_user_admin = await is_admin(message.from_user.id)
    keyboard = get_admin_keyboard() if is_user_admin else get_main_keyboard()
    
    if add_subscriber(user_id, username, first_name, last_name):
        # Get daily send time
        send_time = get_daily_send_time()
        time_str = send_time.strftime("%H:%M")
        
        await message.reply(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π!\n"
            f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_str}.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await message.reply(
            "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π.",
            parse_mode="HTML",
            reply_markup=keyboard
        )

@dp.message(Command('–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è', 'unsubscribe'))
@dp.message(F.text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
async def cmd_unsubscribe(message: types.Message):
    """Handle /–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è command"""
    if not is_bot_active():
        await message.reply(
            "‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_user_admin = await is_admin(message.from_user.id)
    keyboard = get_admin_keyboard() if is_user_admin else get_main_keyboard()
    
    if remove_subscriber(user_id):
        await message.reply(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await message.reply(
            "‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π.",
            parse_mode="HTML",
            reply_markup=keyboard
        )

@dp.message(Command('–ø–æ–º–æ—â—å', 'help'))
@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def cmd_help(message: types.Message):
    """Handle /–ø–æ–º–æ—â—å command"""
    if not is_bot_active():
        await message.reply(
            "‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_user_admin = await is_admin(message.from_user.id)
    keyboard = get_admin_keyboard() if is_user_admin else get_main_keyboard()
    
    commands_text = (
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/–Ω–æ–≤–æ—Å—Ç–∏ - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "/–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/–ø–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
    )
    
    if is_user_admin:
        commands_text += (
            "<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            "/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞\n"
            "/–æ–±–Ω–æ–≤–∏—Ç—å - –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é\n\n"
        )
    
    commands_text += (
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.\n\n"
        "–ë–æ—Ç ¬´–ù–æ–≤–æ—Å—Ç–∏ –ê–Ω–∞–ø–∞ Pro¬ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
    )
    
    await message.reply(
        commands_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )



@dp.message(Command('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'info'))
@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def cmd_info(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    if not is_bot_active():
        await message.reply(
            "‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_user_admin = await is_admin(message.from_user.id)
    keyboard = get_admin_keyboard() if is_user_admin else get_main_keyboard()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    try:
        with app.app_context():
            # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            settings = BotSettings.query.first()
            status = "–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ" if (settings and settings.is_active) else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå"
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
            feed_sources = FeedSource.query.filter_by(is_active=True).all()
            feeds_list = "\n".join([f"‚Ä¢ {feed.name}" for feed in feed_sources]) if feed_sources else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
            
            # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
            active_subscribers = Subscriber.query.filter_by(is_active=True).count()
            total_subscribers = Subscriber.query.count()
            
            # –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏
            main_time = settings.daily_send_time.strftime('%H:%M') if settings and settings.daily_send_time else "08:00"
            additional_times = SendTime.query.filter_by(is_active=True).all()
            times_list = [main_time]
            times_list.extend([time.send_time.strftime('%H:%M') for time in additional_times])
            times_formatted = ", ".join(times_list)
            
            # –ù–æ–≤–æ—Å—Ç–∏
            news_count = NewsItem.query.count()
            latest_news = NewsItem.query.order_by(NewsItem.created_at.desc()).first()
            latest_update = latest_news.created_at.strftime('%Y-%m-%d %H:%M') if latest_news else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            moscow_now = get_moscow_time()
            moscow_time_str = moscow_now.strftime('%H:%M:%S %d.%m.%Y')
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            info_text = (
                "<b>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
                f"<b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {active_subscribers} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑ {total_subscribers} –≤—Å–µ–≥–æ\n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ:</b> {news_count}\n"
                f"<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {latest_update}\n"
                f"<b>–†–∞—Å—Å—ã–ª–∫–∞ –≤:</b> {times_formatted} <i>(–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)</i>\n"
                f"<b>–¢–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:</b> {moscow_time_str}\n\n"
                "<b>üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n"
                f"{feeds_list}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
            if is_user_admin:
                admins = Subscriber.query.filter_by(is_admin=True).all()
                admins_list = "\n".join([f"‚Ä¢ {admin.first_name or ''} {admin.last_name or ''} (@{admin.username or '–Ω–µ—Ç username'}) - ID: {admin.user_id}" 
                                        for admin in admins]) if admins else "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
                
                info_text += (
                    "<b>üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:</b>\n"
                    f"{admins_list}\n\n"
                )
            
            info_text += "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é."
                
    except Exception as e:
        logger.error(f"Error getting bot info: {e}")
        info_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    await message.reply(
        info_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@dp.message(Command('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings'))
@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def cmd_settings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    if not is_bot_active():
        await message.reply(
            "‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_user_admin = await is_admin(message.from_user.id)
    keyboard = get_admin_keyboard() if is_user_admin else get_main_keyboard()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    try:
        with app.app_context():
            subscriber = Subscriber.query.filter_by(user_id=user_id).first()
            is_subscribed = subscriber and subscriber.is_active
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏
            settings = BotSettings.query.first()
            main_time = settings.daily_send_time.strftime('%H:%M') if settings and settings.daily_send_time else "08:00"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
            additional_times = SendTime.query.filter_by(is_active=True).all()
            if additional_times:
                times_list = [time.send_time.strftime('%H:%M') for time in additional_times]
                times_text = ", ".join(times_list)
            else:
                times_text = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            moscow_now = get_moscow_time()
            moscow_time_str = moscow_now.strftime('%H:%M:%S %d.%m.%Y')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
            settings_text = (
                "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
                f"<b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if is_subscribed else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}\n"
                f"<b>–û—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b> {main_time} <i>(–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)</i>\n"
                f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:</b> {times_text} <i>(–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)</i>\n"
                f"<b>–¢–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:</b> {moscow_time_str}\n\n"
            )
            
            if is_user_admin:
                settings_text += (
                    "<b>üëë –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b> –ï—Å—Ç—å\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n"
                    "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏\n"
                    "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏\n"
                    "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞"
                )
            else:
                settings_text += (
                    "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ /–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.\n\n"
                    "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞."
                )
    
    except Exception as e:
        logger.error(f"Error getting settings: {e}")
        settings_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    await message.reply(
        settings_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@dp.message(Command('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats'))
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if not is_bot_active():
        await message.reply(
            "‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_user_admin = await is_admin(message.from_user.id)
    if not is_user_admin:
        await message.reply(
            "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        with app.app_context():
            # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
            total_subscribers = Subscriber.query.count()
            active_subscribers = Subscriber.query.filter_by(is_active=True).count()
            inactive_subscribers = total_subscribers - active_subscribers
            admins_count = Subscriber.query.filter_by(is_admin=True).count()
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
            total_feeds = FeedSource.query.count()
            active_feeds = FeedSource.query.filter_by(is_active=True).count()
            inactive_feeds = total_feeds - active_feeds
            
            # –ù–æ–≤–æ—Å—Ç–∏
            news_count = NewsItem.query.count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            # –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±—É–¥—É—â–µ–º
            
            stats_text = (
                "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
                f"<b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {total_subscribers}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_subscribers}\n"
                f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_subscribers}\n"
                f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins_count}\n\n"
                f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {total_feeds}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_feeds}\n"
                f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_feeds}\n\n"
                f"<b>–ù–æ–≤–æ—Å—Ç–∏:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {news_count}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."
            )
    
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        stats_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
    await message.reply(
        stats_text,
        parse_mode="HTML",
        reply_markup=get_admin_keyboard()
    )

@dp.message(Command('–æ–±–Ω–æ–≤–∏—Ç—å', 'refresh'))
@dp.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
async def cmd_refresh(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–æ–±–Ω–æ–≤–∏—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if not is_bot_active():
        await message.reply(
            "‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_user_admin = await is_admin(message.from_user.id)
    if not is_user_admin:
        await message.reply(
            "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return
    
    await message.reply(
        "üîÑ <i>–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...</i>", 
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        news_per_source = get_news_per_source()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        news_items, has_errors = get_latest_news(news_per_source)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if use_db:
            save_news_items(news_items)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if news_items:
            result_text = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π."
            if has_errors:
                result_text += "\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –±—ã–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        else:
            result_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
            
    except Exception as e:
        logger.error(f"Error refreshing news: {e}")
        result_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}"
    
    await message.reply(
        result_text,
        parse_mode="HTML",
        reply_markup=get_admin_keyboard()
    )

@dp.message()
async def unknown_message(message: types.Message):
    """Handle unknown messages"""
    if not is_bot_active():
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_user_admin = await is_admin(message.from_user.id)
    keyboard = get_admin_keyboard() if is_user_admin else get_main_keyboard()
    
    # If it's not a command or a recognized button, offer help
    await message.reply(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /–ø–æ–º–æ—â—å –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=keyboard
    )

async def send_news_to_subscribers():
    """Send news to all subscribers"""
    try:
        # Check if bot is active
        if not is_bot_active():
            logger.info("Bot is inactive, skipping news delivery")
            return
        
        # Get all active subscribers
        subscribers = get_all_subscribers()
        if not subscribers:
            logger.info("No active subscribers found")
            return
        
        # Get news per source setting
        news_per_source = get_news_per_source()
        
        # Fetch latest news
        logger.info("Fetching news for scheduled delivery")
        news_items, has_errors = get_latest_news(news_per_source)
        
        if not news_items:
            logger.warning("No news items fetched for delivery")
            return
            
        # Save news items to database if using DB
        if use_db:
            save_news_items(news_items)
            
        # Format news message
        formatted_news = format_news_message(news_items)
        
        # Add status information if there were any errors
        if has_errors:
            formatted_news += "\n\n‚ö†Ô∏è <i>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</i>"
        
        # Add footer
        formatted_news += "\n\n<i>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è</i>"
        
        # Send to all subscribers
        logger.info(f"Sending news to {len(subscribers)} subscribers")
        for user_id in subscribers:
            try:
                await bot.send_message(
                    user_id,
                    formatted_news,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                # Add a small delay between messages to avoid flood limits
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.error(f"Error sending news to user {user_id}: {e}")
        
        logger.info("Scheduled news delivery completed")
        
    except Exception as e:
        logger.error(f"Error in scheduled news delivery: {e}")

def get_moscow_time():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ (UTC+3) —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ pytz
        import pytz
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è –ú–æ—Å–∫–≤—ã
        moscow_tz = pytz.timezone('Europe/Moscow')
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
        utc_time = datetime.utcnow().replace(tzinfo=pytz.UTC)
        moscow_time = utc_time.astimezone(moscow_tz)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if moscow_time.minute % 10 == 0 and moscow_time.second < 5:
            logger.info(f"Current Moscow time (pytz): {moscow_time.strftime('%Y-%m-%d %H:%M:%S %Z%z')}")
            
        return moscow_time
    except ImportError:
        # –ï—Å–ª–∏ pytz –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ UTC+3
        moscow_offset = timedelta(hours=3)
        utc_time = datetime.utcnow()
        moscow_time = utc_time + moscow_offset
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if moscow_time.minute % 10 == 0 and moscow_time.second < 5:
            logger.info(f"Current Moscow time (manual offset): {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} (UTC+3)")
            
        return moscow_time

async def scheduler():
    """Run scheduled tasks"""
    startup_log_done = False
    last_check_times = {}  # –•—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ - –ø–æ–ª–Ω—ã–π datetime –æ–±—ä–µ–∫—Ç
            moscow_datetime = get_moscow_time()
            now = moscow_datetime.time()
            
            # Log the current time for debugging
            logger.info(f"Scheduler check - current Moscow time: {now.strftime('%H:%M:%S')}")
            
            # Get all send times
            send_times = get_all_send_times()
            
            # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not startup_log_done:
                time_strings = [t.strftime('%H:%M') for t in send_times]
                logger.info(f"=== SCHEDULER INITIALIZED ===")
                logger.info(f"Current Moscow time: {moscow_datetime.strftime('%Y-%m-%d %H:%M:%S')}")
                logger.info(f"Configured send times: {', '.join(time_strings)}")
                logger.info(f"Next check will be at xx:xx:00 (checking every minute)")
                logger.info(f"===============================")
                startup_log_done = True
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if moscow_datetime.minute % 5 == 0 and moscow_datetime.second < 5:
                time_strings = [t.strftime('%H:%M') for t in send_times]
                logger.info(f"Current Moscow time: {moscow_datetime.strftime('%Y-%m-%d %H:%M:%S')}, Send times: {', '.join(time_strings)}")
            
            # Check if it's time to send news
            for send_time in send_times:
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                time_key = send_time.strftime('%H:%M')
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏ —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è
                current_minutes = now.hour * 60 + now.minute
                target_minutes = send_time.hour * 60 + send_time.minute
                
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                time_diff = abs(current_minutes - target_minutes)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ–ª—É–Ω–æ—á–∏
                if time_diff > 720:  # –±–æ–ª—å—à–µ 12 —á–∞—Å–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–Ω—è
                    time_diff = 1440 - time_diff  # 24 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –±–ª–∏–∑–∫–æ –∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                if time_diff <= 5 or now.minute % 30 == 0:
                    logger.info(f"Checking time: current={now.hour}:{now.minute} ({current_minutes} min), target={send_time.hour}:{send_time.minute} ({target_minutes} min), diff={time_diff} min")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 3 –º–∏–Ω—É—Ç)
                if time_diff <= 3:
                    logger.info(f"Approaching send time: current={now.strftime('%H:%M')}, target={send_time.strftime('%H:%M')}, diff={time_diff} minutes")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Å—ã–ª–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –≤ —ç—Ç–æ –≤—Ä–µ–º—è
                today_key = f"{moscow_datetime.date()}_{time_key}"
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏: –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ, —á–µ–º –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏, –∏ –æ–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 15 –º–∏–Ω—É—Ç,
                # –∏ –º—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è –≤ —ç—Ç–æ –≤—Ä–µ–º—è
                current_hour = now.hour
                current_minute = now.minute
                target_hour = send_time.hour
                target_minute = send_time.minute
                
                # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—à–ª–æ, –Ω–æ –ø—Ä–æ—à–ª–æ –Ω–µ –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç –∏–ª–∏ –º—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è
                past_target = (current_hour > target_hour or 
                              (current_hour == target_hour and current_minute >= target_minute))
                
                if past_target and time_diff <= 15 and today_key not in last_check_times:
                    logger.info(f"!!! Scheduled news delivery triggered at {now.strftime('%H:%M')} MSK time for target {time_key} !!!")
                    logger.info(f"Current: {current_hour}:{current_minute}, Target: {target_hour}:{target_minute}, Diff: {time_diff} min")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è
                    last_check_times[today_key] = moscow_datetime
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
                    try:
                        await send_news_to_subscribers()
                        logger.info(f"News successfully sent at {now.strftime('%H:%M')} MSK time")
                    except Exception as e:
                        logger.error(f"Error sending news: {e}", exc_info=True)
                    
                    # Wait a bit more than a minute to avoid sending twice
                    await asyncio.sleep(70)
                    break
            
            # –û—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            current_date = moscow_datetime.date()
            obsolete_keys = [k for k in last_check_times.keys() 
                            if (current_date - datetime.strptime(k.split('_')[0], '%Y-%m-%d').date()).days >= 1]
            for k in obsolete_keys:
                del last_check_times[k]
            
            # Check every minute
            await asyncio.sleep(60)
            
        except Exception as e:
            logger.error(f"Error in scheduler: {e}", exc_info=True)
            await asyncio.sleep(60)

async def main():
    """Main function"""
    # Start scheduler task
    asyncio.create_task(scheduler())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    try:
        await set_bot_commands()
        logger.info("Bot commands have been set successfully")
    except Exception as e:
        logger.error(f"Error setting bot commands: {e}")
    
    # Start the bot
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
